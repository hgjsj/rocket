// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dataObj

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VirtualMachineClient is the client API for VirtualMachine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualMachineClient interface {
	CreateVM(ctx context.Context, in *VM, opts ...grpc.CallOption) (*ResponseString, error)
	DeleteVM(ctx context.Context, in *RequestString, opts ...grpc.CallOption) (*ResponseString, error)
}

type virtualMachineClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualMachineClient(cc grpc.ClientConnInterface) VirtualMachineClient {
	return &virtualMachineClient{cc}
}

func (c *virtualMachineClient) CreateVM(ctx context.Context, in *VM, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/VM.VirtualMachine/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineClient) DeleteVM(ctx context.Context, in *RequestString, opts ...grpc.CallOption) (*ResponseString, error) {
	out := new(ResponseString)
	err := c.cc.Invoke(ctx, "/VM.VirtualMachine/DeleteVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachineServer is the server API for VirtualMachine service.
// All implementations must embed UnimplementedVirtualMachineServer
// for forward compatibility
type VirtualMachineServer interface {
	CreateVM(context.Context, *VM) (*ResponseString, error)
	DeleteVM(context.Context, *RequestString) (*ResponseString, error)
	mustEmbedUnimplementedVirtualMachineServer()
}

// UnimplementedVirtualMachineServer must be embedded to have forward compatible implementations.
type UnimplementedVirtualMachineServer struct {
}

func (UnimplementedVirtualMachineServer) CreateVM(context.Context, *VM) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedVirtualMachineServer) DeleteVM(context.Context, *RequestString) (*ResponseString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (UnimplementedVirtualMachineServer) mustEmbedUnimplementedVirtualMachineServer() {}

// UnsafeVirtualMachineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualMachineServer will
// result in compilation errors.
type UnsafeVirtualMachineServer interface {
	mustEmbedUnimplementedVirtualMachineServer()
}

func RegisterVirtualMachineServer(s grpc.ServiceRegistrar, srv VirtualMachineServer) {
	s.RegisterService(&VirtualMachine_ServiceDesc, srv)
}

func _VirtualMachine_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM.VirtualMachine/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServer).CreateVM(ctx, req.(*VM))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachine_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VM.VirtualMachine/DeleteVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineServer).DeleteVM(ctx, req.(*RequestString))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualMachine_ServiceDesc is the grpc.ServiceDesc for VirtualMachine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualMachine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VM.VirtualMachine",
	HandlerType: (*VirtualMachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVM",
			Handler:    _VirtualMachine_CreateVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _VirtualMachine_DeleteVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/dataObj/vm.proto",
}

// VolumesClient is the client API for Volumes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumesClient interface {
	ListVolumes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Volumes_ListVolumesClient, error)
}

type volumesClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumesClient(cc grpc.ClientConnInterface) VolumesClient {
	return &volumesClient{cc}
}

func (c *volumesClient) ListVolumes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Volumes_ListVolumesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Volumes_ServiceDesc.Streams[0], "/VM.Volumes/ListVolumes", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumesListVolumesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Volumes_ListVolumesClient interface {
	Recv() (*Volume, error)
	grpc.ClientStream
}

type volumesListVolumesClient struct {
	grpc.ClientStream
}

func (x *volumesListVolumesClient) Recv() (*Volume, error) {
	m := new(Volume)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VolumesServer is the server API for Volumes service.
// All implementations must embed UnimplementedVolumesServer
// for forward compatibility
type VolumesServer interface {
	ListVolumes(*Empty, Volumes_ListVolumesServer) error
	mustEmbedUnimplementedVolumesServer()
}

// UnimplementedVolumesServer must be embedded to have forward compatible implementations.
type UnimplementedVolumesServer struct {
}

func (UnimplementedVolumesServer) ListVolumes(*Empty, Volumes_ListVolumesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (UnimplementedVolumesServer) mustEmbedUnimplementedVolumesServer() {}

// UnsafeVolumesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumesServer will
// result in compilation errors.
type UnsafeVolumesServer interface {
	mustEmbedUnimplementedVolumesServer()
}

func RegisterVolumesServer(s grpc.ServiceRegistrar, srv VolumesServer) {
	s.RegisterService(&Volumes_ServiceDesc, srv)
}

func _Volumes_ListVolumes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumesServer).ListVolumes(m, &volumesListVolumesServer{stream})
}

type Volumes_ListVolumesServer interface {
	Send(*Volume) error
	grpc.ServerStream
}

type volumesListVolumesServer struct {
	grpc.ServerStream
}

func (x *volumesListVolumesServer) Send(m *Volume) error {
	return x.ServerStream.SendMsg(m)
}

// Volumes_ServiceDesc is the grpc.ServiceDesc for Volumes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Volumes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VM.Volumes",
	HandlerType: (*VolumesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVolumes",
			Handler:       _Volumes_ListVolumes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/dataObj/vm.proto",
}
